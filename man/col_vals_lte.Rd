% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_vals_lte.R
\name{col_vals_lte}
\alias{col_vals_lte}
\title{Are numerical column data less than or equal to a specific value?}
\usage{
col_vals_lte(
  x,
  columns,
  value,
  na_pass = FALSE,
  preconditions = NULL,
  brief = NULL,
  actions = NULL
)
}
\arguments{
\item{x}{A data frame, tibble, or an agent object of class \code{ptblank_agent}.}

\item{columns}{The column (or a set of columns, provided as a character
vector) to which this validation should be applied.}

\item{value}{A numeric value used for this test. Any column values \verb{<= value}
are considered passing.}

\item{na_pass}{Should any encountered \code{NA} values be allowed to pass a
validation unit? This is by default \code{FALSE}. Set to \code{TRUE} to give \code{NA}s
a pass.}

\item{preconditions}{expressions used for mutating the input table before
proceeding with the validation. This is ideally as a one-sided R formula
using a leading \code{~}. In the formula representation, the \code{tbl} serves as the
input data table to be transformed (e.g.,
\code{~ tbl \%>\% dplyr::mutate(col = col + 10)}. A series of expressions can be
used by enclosing the set of statements with \code{{ }} but note that the \code{tbl}
object must be ultimately returned.}

\item{brief}{An optional, text-based description for the validation step.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}
}
\value{
Either a \code{ptblank_agent} object or a table object, depending on what
was passed to \code{x}.
}
\description{
Verification step where numeric values in a table column should be less than
or equal to a specified value.
}
\examples{
# Create a simple data frame with
# a column of numerical values
df <-
  data.frame(
    a = c(5, 4, 3, 5, 1, 2),
    b = c(3, 2, 4, 3, 5, 6)
  )

# Validate that the sum of
# values across columns `a`
# and `b` are always less
# than or equal to 10
agent <-
  create_agent(tbl = df) \%>\%
  col_vals_lte(
    columns = vars(a_b),
    value = 10,
    preconditions = ~ {
      tbl \%>\% dplyr::mutate(a_b = a + b)
    }
  ) \%>\%
  interrogate()

# Determine if this column
# validation has passed by using
# `all_passed()`
all_passed(agent)

}
