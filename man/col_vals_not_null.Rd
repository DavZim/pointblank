% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_vals_not_null.R
\name{col_vals_not_null}
\alias{col_vals_not_null}
\title{Are column data not \code{NULL}?}
\usage{
col_vals_not_null(
  x,
  columns,
  preconditions = NULL,
  brief = NULL,
  actions = NULL
)
}
\arguments{
\item{x}{A data frame, tibble, or an agent object of class \code{ptblank_agent}.}

\item{columns}{The column (or a set of columns, provided as a character
vector) to which this validation should be applied.}

\item{preconditions}{expressions used for mutating the input table before
proceeding with the validation. This is ideally as a one-sided R formula
using a leading \code{~}. In the formula representation, the \code{tbl} serves as the
input data table to be transformed (e.g.,
\code{~ tbl \%>\% dplyr::mutate(col = col + 10)}. A series of expressions can be
used by enclosing the set of statements with \code{{ }} but note that the \code{tbl}
object must be ultimately returned.}

\item{brief}{An optional, text-based description for the validation step.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}
}
\value{
Either a \code{ptblank_agent} object or a table object, depending on what
was passed to \code{x}.
}
\description{
Verification step where no values in a table column are expected to be
\code{NULL}.
}
\examples{
library(dplyr)

# Create a simple data frame with
# two columns of numerical values
df <-
  data.frame(
    a = c(1, 2, NA, NA),
    b = c(2, 2, 5, 5),
    stringsAsFactors = FALSE
  )

# Validate that all values in
# column `a` are not NULL when
# values in column `b` are equal
# to 2
agent <-
  create_agent(tbl = df) \%>\%
  col_vals_not_null(
    columns = vars(a),
    preconditions = ~ tbl \%>\% dplyr::filter(b == 2)
  ) \%>\%
  interrogate()

# Determine if these column
# validations have all passed
# by using `all_passed()`
all_passed(agent)

}
