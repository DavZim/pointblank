% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_vals_regex.R
\name{col_vals_regex}
\alias{col_vals_regex}
\title{Do strings in column data match a regex pattern?}
\usage{
col_vals_regex(
  x,
  columns,
  regex,
  na_pass = FALSE,
  preconditions = NULL,
  brief = NULL,
  actions = NULL
)
}
\arguments{
\item{x}{A data frame, tibble, or an agent object of class \code{ptblank_agent}.}

\item{columns}{The column (or a set of columns, provided as a character
vector) to which this validation should be applied.}

\item{regex}{A regex pattern to test for matching strings.}

\item{na_pass}{Should any encountered \code{NA} values be allowed to pass a
validation unit? This is by default \code{FALSE}. Set to \code{TRUE} to give \code{NA}s
a pass.}

\item{preconditions}{expressions used for mutating the input table before
proceeding with the validation. This is ideally as a one-sided R formula
using a leading \code{~}. In the formula representation, the \code{tbl} serves as the
input data table to be transformed (e.g.,
\code{~ tbl \%>\% dplyr::mutate(col = col + 10)}. A series of expressions can be
used by enclosing the set of statements with \code{{ }} but note that the \code{tbl}
object must be ultimately returned.}

\item{brief}{An optional, text-based description for the validation step.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}
}
\value{
Either a \code{ptblank_agent} object or a table object, depending on what
was passed to \code{x}.
}
\description{
Verification step where string-based column data should correspond to a regex
matching expression.
}
\examples{
# Create a simple data frame
# with a column containing strings
df <-
  data.frame(
    a = c("s_0131", "s_0231",
          "s_1389", "s_2300"),
    stringsAsFactors = FALSE
  )

# Validate that all string values in
# column `a` match a regex statement
agent <-
  create_agent(tbl = df) \%>\%
  col_vals_regex(
    columns = vars(a),
    regex = "^s_[0-9]{4}$"
  ) \%>\%
  interrogate()

# Determine if these column
# validations have all passed
# by using `all_passed()`
all_passed(agent)

}
