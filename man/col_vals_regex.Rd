% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_vals_regex.R
\name{col_vals_regex}
\alias{col_vals_regex}
\title{Do strings in column data match a regex pattern?}
\usage{
col_vals_regex(
  x,
  column,
  regex,
  preconditions = NULL,
  brief = NULL,
  warn_count = NULL,
  stop_count = NULL,
  notify_count = NULL,
  warn_fraction = NULL,
  stop_fraction = NULL,
  notify_fraction = NULL,
  tbl_name = NULL,
  db_type = NULL,
  creds_file = NULL,
  initial_sql = NULL,
  file_path = NULL,
  col_types = NULL
)
}
\arguments{
\item{x}{A data frame, tibble, or an agent object of class \code{ptblank_agent}.}

\item{column}{The column (or a set of columns, provided as a character
vector) to which this validation should be applied. Aside from a single
column name, column operations can be used to create one or more computed
columns (e.g., \code{a + b} or \code{a + sum(a)}).}

\item{regex}{A regex pattern to test for matching strings.}

\item{preconditions}{expressions used for mutating the input table before
proceeding with the validation. This is ideally as a one-sided R formula
using a leading \code{~}. In the formula representation, the \code{tbl} serves as the
input data table to be transformed (e.g.,
\code{~ tbl \%>\% dplyr::mutate(col = col + 10)}. A series of expressions can be
used by enclosing the set of statements with \code{{ }} but note that the \code{tbl}
object must be ultimately returned.}

\item{brief}{An optional, text-based description for the validation step.}

\item{warn_count}{The threshold number for individual
validations returning a \code{FALSE} result before applying the \code{warn} or
\code{notify} flag.}

\item{stop_count}{The threshold number or fraction of \code{FALSE}
validation results before stopping a simple validation or stopping an
agent-based validation.}

\item{notify_count}{The threshold number for individual
validations returning a \code{FALSE} result before applying the \code{warn} or
\code{notify} flag.}

\item{warn_fraction}{The threshold fraction for individual
validations returning a \code{FALSE} over all the entire set of individual
validations. Beyond this threshold, either the \code{warn} or \code{notify} flag will
be applied.}

\item{stop_fraction}{The threshold number or fraction of \code{FALSE}
validation results before stopping a simple validation or stopping an
agent-based validation.}

\item{notify_fraction}{The threshold fraction for individual
validations returning a \code{FALSE} over all the entire set of individual
validations. Beyond this threshold, either the \code{warn} or \code{notify} flag will
be applied.}

\item{tbl_name}{The name of the local or remote table.}

\item{db_type}{If the table is located in a database, the type of database is
required here. Currently, this can be either \code{PostgreSQL} or \code{MySQL}.}

\item{creds_file}{If a connection to a database is required for reaching the
table specified in \code{tbl_name}, then a path to a credentials file can be
used to establish that connection. The credentials file is an \code{RDS}
containing a character vector with the following items in the specified
order: (1) database name (\code{dbname}), (2) the \code{host} name, (3) the \code{port},
(4) the username (\code{user}), and (5) the \code{password}. This file can be easily
created using the \code{\link[=create_creds_file]{create_creds_file()}} function.}

\item{initial_sql}{When accessing a remote table, this provides an option to
provide an initial query component before conducting validations. An entire
SQL statement can be provided here, or, as a shortcut, the initial
\code{SELECT...} statement can be omitted for simple queries (e.g., \verb{WHERE a > 1 AND b = 'one'}).}

\item{file_path}{An optional path for a tabular data file to be loaded for
this verification step. Valid types are CSV and TSV files.}

\item{col_types}{If validating a CSV or TSV file, an optional column
specification can be provided here as a string. This string representation
is where each character represents one column and the mappings are: \code{c} ->
character, \code{i} -> integer, \code{n} -> number, \code{d} -> double, \code{l} -> logical,
\code{D} -> date, \code{T} -> date time, \code{t} -> time, \verb{?} -> guess, or \verb{_/-}, which
skips the column.}
}
\value{
Either a \pkg{pointblank} agent object or a table object, depending
on what was passed to \code{x}.
}
\description{
Verification step where string-based column data should correspond to a regex
matching expression.
}
\examples{
# Create a simple data frame with a column
# containing strings
df <-
  data.frame(
    a = c("s_0131", "s_0231",
          "s_1389", "s_2300"),
    stringsAsFactors = FALSE)

# Validate that all string values in
# column `a` match a regex statement
agent <-
  create_agent() \%>\%
  focus_on(tbl_name = "df") \%>\%
  col_vals_regex(
    column = a,
    regex = "^s_[0-9]{4}$") \%>\%
  interrogate()

# Determine if these column
# validations have all passed
# by using `all_passed()`
all_passed(agent)

}
