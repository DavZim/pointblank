% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conjointly.R
\name{conjointly}
\alias{conjointly}
\title{Perform multiple rowwise validations for joint validity}
\usage{
conjointly(
  x,
  ...,
  .list = list2(...),
  preconditions = NULL,
  brief = NULL,
  actions = NULL
)
}
\arguments{
\item{x}{A data frame, tibble, or an agent object of class \code{ptblank_agent}.}

\item{...}{a collection one-sided formulas that consist of validation step
functions that validate row units. Specifically, these functions should be
those with the naming pattern \verb{col_vals_*()}. An example of this is
\verb{~ col_vals_gte(., columns = vars(a), value = 5.5), ~ col_vals_not_null(., columns = vars(b)}).}

\item{.list}{Allows for the use of a list as an input alternative to \code{...}.}

\item{preconditions}{expressions used for mutating the input table before
proceeding with the validation. This is ideally as a one-sided R formula
using a leading \code{~}. In the formula representation, the \code{tbl} serves as the
input data table to be transformed (e.g.,
\code{~ tbl \%>\% dplyr::mutate(col = col + 10)}. A series of expressions can be
used by enclosing the set of statements with \code{{ }} but note that the \code{tbl}
object must be ultimately returned.}

\item{brief}{An optional, text-based description for the validation step.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}
}
\description{
Perform multiple rowwise validations for joint validity
}
\examples{
# Create a simple data frame with
# three columns of numerical values
df <-
  data.frame(
    a = c(5, 7, 6, 5, 8, 7),
    b = c(3, 4, 6, 8, 9, 11),
    c = c(2, 6, 8, NA, 3, 8)
  )

# Validate that values in column
# `a` are always greater than 4
agent <-
  create_agent(tbl = df) \%>\%
  conjointly(
    ~ col_vals_gt(., columns = vars(a), value = 6),
    ~ col_vals_lt(., columns = vars(b), value = 10),
    ~ col_vals_not_null(., columns = vars(c))
    ) \%>\%
  interrogate()

}
